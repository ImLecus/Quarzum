import "@std/memory.qz"

class List<T>{
    public uint64 size;
    public uint64 length;
    private T* elements;
    
    public bool isEmpty() => this.length == 0;

    public function resize(uint64 newsize){
        this.size = newsize;
        realloc(this.elements, sizeof(T)*newsize);
    }

    public function push(T element){
        if(this.length + 1 >= this.size){
            this.size *= 2;
            realloc(this.elements, sizeof(T) * this.size);
        }
        this.elements[this.length++] = element;
    }

    public T get(uint64 index) => index >= this.length ? null : this.elements[index];

    public function pop(){
        this.elements[this.length--] = null;
    }

    public T getFirst() => this.get(0);
    public T getLast() => this.get(this.length - 1);

    constructor(uint64 size = 0){
        this.size = size;
        malloc(this.elements, sizeof(T) * size);
    }

    destructor(){
        free(elements);
        free(this);
    }
}