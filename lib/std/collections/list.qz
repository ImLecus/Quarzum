import "@std/memory.qz"

/*
    Defines a List type, a dynamic array-type.
*/

class List <T> {
    private T* elements;
    private uint64 size;
    private uint64 length;

    public function reverse(){
        
    }
    public function clear(){
        for(int i = 0; i < length; ++i){
            elements[i] = null;
        }
    }
    public uint64 size() => size ;
    public uint64 length() => length ;
    public bool empty() => length == 0 ;
    public function pop(){
        elements[length-- - 1] = null;
    }

    public function resize(uint64 newsize){
        size = newsize;
        realloc(elements, sizeof(T)*newsize);
    }

    public function push(T element){
        if(length + 1 >= size){
            size *= 2;
            realloc(elements, sizeof(T) * size);
        }
        elements[length++] = element;
    }

    public T get(uint64 index) => index >= length ? null : elements[index];

    public T get_first() => get(0);
    public T get_last() => get(length - 1);

    constructor(uint64 size = 0){
        this.size = size;
        malloc(elements, sizeof(T) * size);
    }

    destructor(){
        free(elements);
    }
}